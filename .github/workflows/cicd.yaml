name: CI/CD
on: [push]
jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - run: echo "CI for branch [{{ github.ref }}] started"
      - run: echo "Clone repository and checkout to the target branch"
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "Run gradle check"
      - run: ./gradlew check
      - run: echo "Upload test result"
      - name: Upload test result
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: test-result
          path: |
            subprojects/our-map/build/reports/tests
            subprojects/our-map-server/build/reports/tests

      # gradle check 때 만들어진 빌드 아티팩트를 최대한 재사용하기 위해
      # 여기서 gradle installDist를 실행한 후 CD job으로 넘겨준다.
      - run: echo "Run gradle installDist"
        if: github.ref == 'refs/heads/main'
      - run: ./gradlew installDist
        if: github.ref == 'refs/heads/main'
      - run: echo "Upload installDist artifacts"
        if: github.ref == 'refs/heads/main'
      - name: Upload installDist artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v2
        with:
          name: installDist-artifact
          path: subprojects/our-map-server/build/install
  CD:
    if: github.ref == 'refs/heads/main'
    needs: CI
    runs-on: ubuntu-latest
    steps:
      - run: echo "CD for branch [{{ github.ref }}] started"
      - run: echo "Clone repository and checkout to the target branch"
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "Set java version to 8"
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
      - run: echo "Download installDist artifact"
      - name: Download installDist artifact
        uses: actions/download-artifact@v2
        with:
          name: installDist-artifact
          path: subprojects/our-map-server/build
      - run: ls subprojects/our-map-server/build

      - run: echo "Configure AWS credentials"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - run: echo "Push docker image to ECR"
      - run: ./bin/docker-push.sh

      - run: echo "Deploy OurMapServer with docker image"
      - name: Deploy OurMapServer with docker image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
          script: |
            cd our-map-server
            git pull
            ./bin/deploy.sh
